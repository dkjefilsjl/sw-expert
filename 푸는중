/////////////////////////////////////////////////////////////////////////////////////////////
// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의
// 아래 표준 입출력 예제 필요시 참고하세요.
// 표준 입력 예제
// int a;
// float b, c;
// double d, e, f;
// char g;
// char var[256];
// long long AB;
// cin >> a;                            // int 변수 1개 입력받는 예제
// cin >> b >> c;                       // float 변수 2개 입력받는 예제 
// cin >> d >> e >> f;                  // double 변수 3개 입력받는 예제
// cin >> g;                            // char 변수 1개 입력받는 예제
// cin >> var;                          // 문자열 1개 입력받는 예제
// cin >> AB;                           // long long 변수 1개 입력받는 예제
/////////////////////////////////////////////////////////////////////////////////////////////
// 표준 출력 예제
// int a = 0;                            
// float b = 1.0, c = 2.0;               
// double d = 3.0, e = 0.0; f = 1.0;
// char g = 'b';
// char var[256] = "ABCDEFG";
// long long AB = 12345678901234567L;
// cout << a;                           // int 변수 1개 출력하는 예제
// cout << b << " " << c;               // float 변수 2개 출력하는 예제
// cout << d << " " << e << " " << f;   // double 변수 3개 출력하는 예제
// cout << g;                           // char 변수 1개 출력하는 예제
// cout << var;                         // 문자열 1개 출력하는 예제
// cout << AB;                          // long long 변수 1개 출력하는 예제
/////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <vector>
#include <sstream>
#include <string>
#include <stdlib.h>

using namespace std;

struct Node
{
	char data;
	Node* left;
	Node* right;

};
Node* Root;

int visited[100] = { 0, };
char b[5] = { 0, };

void inorder_traverse(Node* R)
{
	if (R->left) inorder_traverse(R->left);
	printf("%d", R->data);
	if (R->right) inorder_traverse(R->right);
}

Node* check_traverse(Node* R)
{
	if (R->left) inorder_traverse(R->left);
	printf("%d", R->data);
	if (R->right) inorder_traverse(R->right);
}

Node* push_order(vector<string> v, string s, int i)
{
	if (visited[i] == 1)
	{
		Node* Curr = Root;
		
	}
	else visited[i] = 1;
	int j = 0;
	istringstream ss(v[i]);
	while (getline(ss, s, ' '))
	{
		strcpy(b + j, s.c_str());
		j++;
	}
	for (int k = 0; k < j; k++)
	{
		if (i == 0)
		{
			if (k == 1)
			{
				Root->data = b[k];
				Root->left = NULL;
				Root->right = NULL;
			}
			else if (k == 2)
			{
				Root->left = push_order(v, s, b[k]-1);
			}
			else
			{
				Root->right = push_order(v, s, b[k] - 1);
			}
		}
		else
		{
			Node* New;
			New = (Node*)malloc(sizeof(Node));
			if (k == 1)
			{
				New->data = b[k];
			}
			else if (k == 2)
			{

			}
			else
			{

			}
			return New;
		}
	}
	return 0;
}

int main(int argc, char** argv)
{
	int test_case;
	int T;

	cin >> T;

	for (test_case = 1; test_case <= T; ++test_case)
	{
		int n;
		string st;
		string s;
		vector<string> v;

		cin >> n;
		Root = (Node*)malloc(sizeof(Node));

		for (int i = 0; i < n; i++)
		{
			cin >> st;
			v.push_back(st);
		}

		for (int i = 0; i < n; i++)
		{


		}

	}
	return 0;
}
