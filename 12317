#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <stdio.h>

static unsigned int seed = 12345;
static unsigned int pseudo_rand(int max) {
	seed = ((unsigned long long)seed * 1103515245 + 12345) & 0x7FFFFFFF;
	return seed % max;
}

#define MAX_N (40)
#define MAX_K (98)
#define MIN_N (2)
#define MAX_CHILD (5)

extern void dfs_init(int N, int path[MAX_N][2]);
extern int dfs(int k);

static int p[MAX_K + 2];
static int c[MAX_K + 2];
static int path[MAX_N][2];

static void makeTree(int n) {
	for (int i = 1; i < MAX_K + 2; ++i) {
		p[i] = c[i] = -1;
	}
	c[pseudo_rand(MAX_K + 1) + 1] = 0;
	for (int i = 0; i < n; ++i) {
		int pi = pseudo_rand(MAX_K + 1) + 1;
		while (c[pi] < 0 || c[pi] >= MAX_CHILD) {
			++pi;
			if (pi == MAX_K + 2)
				pi = 1;
		}
		int ci = pseudo_rand(MAX_K + 1) + 1;
		while (c[ci] >= 0) {
			++ci;
			if (ci == MAX_K + 2)
				ci = 1;
		}
		p[ci] = pi;
		++c[pi];
		c[ci] = 0;
	}
	bool check[MAX_K + 2] = { false };
	for (int i = 0; i < n; ++i) {
		int e = pseudo_rand(MAX_K + 1) + 1;
		while (check[e] || c[e] < 0 || p[e] == -1) {
			++e;
			if (e == MAX_K + 2)
				e = 1;
		}
		check[e] = true;
		path[i][0] = p[e];
		path[i][1] = e;
		printf("i = %d, path[i][0] = %d, path[i][1] = %d\n", i, p[e], e);
	}
}

int main() {
	setbuf(stdout, NULL);
	int T;
	//freopen("dfs_input.txt", "r", stdin);
	scanf("%d", &T);

	int totalScore = 0;
	for (int tc = 1; tc <= T; tc++) {
		int n, q;

		scanf("%d %d %d", &n, &q, &seed);

		makeTree(n - 1);
		dfs_init(n, path);

		bool check[MAX_K + 2] = { false };
		int score = 100;
		for (int i = 0; i < q; ++i) {
			int k, ret, correct;

			scanf("%d", &k);

			ret = dfs(k);
			
			scanf("%d", &correct);

			if (ret != correct)
				score = 0;
			printf("ret = %d, correct = %d\n", ret, correct);
		}
		printf("#%d : %d\n", tc, score);
		totalScore += score;
	}
	printf("#total score : %d\n", totalScore / T);

	return 0;
}


int my_child[100][MAX_CHILD] = { -1, };
int check = 0;
int my_n = 0;

void dfs_init(int N, int path[100][2])
{
	check = 0;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < MAX_CHILD; j++)
		{
			my_child[path[i][0]][j] = -1;
			my_child[path[i][1]][j] = -1;
		}

	}
	for (int i = 0; i < N; i++)
	{
		int j = 0;
		while (my_child[path[i][0]][j] != -1)
		{
			j++;
		}
		if (j != MAX_CHILD)
			my_child[path[i][0]][j] = path[i][1];
	}
}

int check_dfs(int n)
{
	int re = 0;
	int i = 0;
	while ((my_child[n][i] != -1))
	{
		int next = my_child[n][i];
		if (next > my_n)
		{
			check = 1;
			return (next);
		}
		else
		{
			re = check_dfs(my_child[n][i]);
			if (check == 1)
			{
				return (re);
			}
		}
		i++;
		if (sizeof(my_child[n]) == i)
			return (-1);
	}
	if (re > my_n)
		return (re);
	else
		return (-1);
}
int dfs(int n)
{
	my_n = n;
	check = 0;
	return (check_dfs(n));
}
